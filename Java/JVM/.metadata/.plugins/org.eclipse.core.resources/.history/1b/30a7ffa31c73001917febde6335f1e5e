package cn.yourick.memoryAllocationAndCollectionPolicies;

/**
 * @author YorickYou
 * 2019年5月9日
 * GitHUb：https://github.com/YorickYou/Notes/tree/master/Java/JVM
 */
public class EdenTest {
	
	private static final int _1MB = 1024 * 1024;
	
	/*-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails 
	-XX:SurvivorRatio=8
	-XX:+UseSerialGC*/
	public static void testAllocation(){
		byte[] allocation1, allocation2, allocation3, allocation4;
		allocation1 = new byte[2 * _1MB];
		allocation2 = new byte[2 * _1MB];
		allocation3 = new byte[2 * _1MB];
		allocation4 = new byte[4 * _1MB];	//在这里出现一次Minor GC
	}
	/**
	 * -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails 
-XX:SurvivorRatio=8
-XX:PretenureSizeThreshold=3145728
-XX:+UseSerialGC
	 */
	public static  void testPretenureSizeThreshold(){
		byte[] allocation;
		allocation = new byte[4 * _1MB];//直接分配在老年代中
	}
	/**
	 * -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails 
-XX:SurvivorRatio=8
-XX:MaxTenuringThreshold=1
-XX:+UseSerialGC
-XX:TargetSurvivorRatio
  设定survivor区的目标使用率。默认50，即survivor区对象目标使用率为50%。
	 */
	public static void testTenuringThreshold(){
		byte[] allocation1, allocation2, allocation3;
		allocation1 = new byte[_1MB / 4];
		//什么时候进入老年代取决于XX：MaxTenuringThreshold设置
		allocation2 = new byte[4 * _1MB];
		allocation3 = new byte[4 * _1MB];
		allocation3 = null;
		allocation3 = new byte[4 * _1MB];
	}
	/**
	 * -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails 
-XX:SurvivorRatio=8
-XX:MaxTenuringThreshold=15
-XX:+UseSerialGC
-XX:+PrintTenuringDistribution
	 */
	public static void testTenuringThreshold2(){
		byte[] allocation1, allocation2, allocation3, allocation4;
		allocation1 = new byte[_1MB / 4];
		//allocation1 + allocation2大于Survivor空间一半
		allocation2 = new byte[_1MB / 4];
		allocation3 = new byte[4 * _1MB];
		allocation4 = new byte[4 * _1MB];//Minor GC
		allocation4 = null;
		allocation4 = new byte[4 * _1MB];//Minor GC
	}
	/**
	 * -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails 
-XX:SurvivorRatio=8
-XX:MaxTenuringThreshold=15
-XX:+UseSerialGC
-XX:+PrintTenuringDistribution
-XX:+HandlePromotionFailure
	 */
	public static void testHandlePromotion(){
		byte[] allocation1, allocation2, allocation3, allocation4,
		allocation5,allocation6,allocation7;
		allocation1 = new byte[2 * _1MB];
		allocation2 = new byte[2 * _1MB];
		allocation3 = new byte[2 * _1MB];
		allocation1 = null;
		allocation4 = new byte[2 * _1MB];//Minor Gc
		allocation5 = new byte[2 * _1MB];
		allocation6 = new byte[2 * _1MB];
		allocation4 = null;
		allocation5 = null;
		allocation6 = null;
		allocation7 = new byte[2 * _1MB];//Full GC
	}
	
	
	public static void main(String[] args) {
//		testAllocation();
//		testPretenureSizeThreshold();
//		testTenuringThreshold();
		testTenuringThreshold2();
//		testHandlePromotion();
	}
}
