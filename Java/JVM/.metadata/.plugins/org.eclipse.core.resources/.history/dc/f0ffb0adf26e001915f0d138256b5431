package cn.yourick.classloader;

import java.io.IOException;
import java.io.InputStream;

public class ClassLoaderTest {
	public static void main(String[] args) {
		ClassLoader classLoader = new ClassLoader() {
			@Override
			public Class<?> loadClass(String name) throws ClassNotFoundException {
				
				try {
					String filename = name.substring(name.lastIndexOf(".")+1) + ".class";
					//getClass() 返回此Object的运行时类
					InputStream is = getClass().getResourceAsStream(filename);
					if(is == null){
						return super.loadClass(name);
					}
					//available()返回从该输入流中可以读取（或跳过）的字节数的估计值，而不会被下一次调用此输入流的方法阻塞。
					byte[] b = new byte[is.available()];
					is.read(b);
					return defineClass(name, b, 0, b.length);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				// TODO Auto-generated method stub
				
			}
		};
	}
}
